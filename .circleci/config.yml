version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-short-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo << parameters.workflow-short-id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow-short-id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow-short-id >>

jobs:
  build-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Frontend smoke test
          command: |
            echo 0
  build-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Frontend smoke test
          command: |
            echo 0
  test-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Frontend smoke test
          command: |
            echo 0
  scan-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Frontend smoke test
          command: |
            echo 0
  test-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Frontend smoke test
          command: |
            echo 0
  scan-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Frontend smoke test
          command: |
            echo 0
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --region=us-east-1 \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --region=us-east-1 \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --region us-east-1 --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow-short-id: "${CIRCLE_WORKFLOW_ID:0:7}"
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [6f:e7:96:dc:ab:93:5b:24:db:29:0a:23:62:69:cd:81]
      - attach_workspace: #Attach the "workspace" to the job so that you have access to all the files you need (e.g. inventory file).
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip3 install --upgrade pip
            pip3 install --no-cache-dir awscli
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow-short-id: "${CIRCLE_WORKFLOW_ID:0:7}" 
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip3 install --upgrade pip
            pip3 install --no-cache-dir awscli

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --region us-east-1 --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "BACK IP: ${BACKEND_IP}"
            export API_URL="${BACKEND_IP}"
            echo "${API_URL}"
            echo "${AWS_DEFAULT_REGION}"
      - run:
          name: ls
          command: |
            ls -la
      - run:
          name: execute python file
          command: |
            python create_front.py
      - run:
          name: copy local files to s3
          command: |
            aws s3 cp index.html s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/
      - destroy-environment:
          workflow-short-id: "${CIRCLE_WORKFLOW_ID:0:7}"


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend 
      - test-frontend:
          requires: [build-frontend]
      - scan-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend,scan-frontend,test-backend,scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-frontend:
          requires: [configure-infrastructure]
      
